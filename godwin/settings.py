"""
Django settings for godwin project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
import cloudinary

from dotenv import load_dotenv
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-mt=@%n&2-7hn-p089$sxs^ab+g3l)56=&6&^0kvdeezc3c#8b)"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv('DEBUG') == 'True'

DEBUG = False
ALLOWED_HOSTS = ['.vercel.app', 'www.godwin.ch', "godwin.ch" 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'cloudinary_storage',
    'cloudinary',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main",
    "froala_editor",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "godwin.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "main", "templates", "main")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "godwin.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Enable WhiteNoise compression and caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Remove any existing MEDIA_URL and MEDIA_ROOT settings
# and replace with this:
MEDIA_URL = '/media/'  # This is just a prefix, Cloudinary will handle the actual URL
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Make sure these are at the root level of settings.py, not inside any if/else blocks
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUD_NAME'),
    'API_KEY': os.getenv("API_KEY"),
    'API_SECRET': os.getenv('API_SECRET'),
    'STATIC_TAG': 'static',
    'MEDIA_TAG': 'media',
    'INVALID_VIDEO_ERROR_MESSAGE': 'Please upload a valid video file.',
}

# This is the key setting that needs to be at the root level
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
MEDIA_URL = '/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Configure Cloudinary
cloudinary.config(
    cloud_name=os.getenv('CLOUD_NAME'),
    api_key=os.getenv('API_KEY'),
    api_secret=os.getenv('API_SECRET')
)

if not DEBUG:
    # Production settings
    STATIC_URL = "static/"
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'main', 'static'),
    ]
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv("DATABASE_URL"),
            conn_max_age=600,
            ssl_require=True
        )
    }
else:
    # Development settings
    STATIC_URL = "static/"
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'main', 'static'),
    ]
   
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv("DATABASE_URL"),
            conn_max_age=600,
            ssl_require=True
        )
    }

# Froala Editor Configuration
FROALA_EDITOR_OPTIONS = {
    'imageUploadURL': '/upload_image/',
    'imageUploadParams': {
        'type': 'image'
    },
    'imageManagerLoadURL': '/load_images/',
    'imageManagerDeleteURL': '/delete_image/',
    'imageManagerDeleteMethod': 'POST',
    'imageManagerLoadMethod': 'GET',
    'imageUploadMethod': 'POST',
    'imageUploadToS3': False,
    'imageUploadToCloudinary': True,
    'imageUploadToCloudinaryOptions': {
        'cloudName': os.getenv('CLOUD_NAME'),
        'apiKey': os.getenv('API_KEY'),
        'apiSecret': os.getenv('API_SECRET'),
        'uploadPreset': 'ml_default',  # You can create a custom upload preset in Cloudinary
    }
}

